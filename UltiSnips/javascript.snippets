snippet ci "console.info"
console.info('${1}', ${2:$1});${0}
endsnippet

snippet im "import xyz from 'xyz'"
import ${1} from '${2:./$1}';
endsnippet

snippet imas "import * as xyz from 'xyz'"
import * as ${1} from '${2:$1}';
endsnippet

snippet imm "import { member } from 'xyz'"
import { ${1} } from '${2}';
endsnippet

snippet fnr
function ${1:functionName}(${2:props}) {
	return (
		${0:${VISUAL}}
	);
}
endsnippet

snippet fn
function ${1:functionName}(${2:props}) {
	${0:${VISUAL}}
}
endsnippet

snippet ed
export default ${0}
endsnippet

snippet const
const ${1} = ${0};
endsnippet

snippet let
let ${1} = ${0};
endsnippet

snippet cla
class ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet clax
class ${1} extends ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet clac
class ${1} {
	constructor(${2}) {
		${0:${VISUAL}}
	}
}
endsnippet

snippet foro "for (const prop of object}) { ... }"
for (const ${1:prop} of ${2:object}) {
	${0:${VISUAL}}
}
endsnippet

snippet caf
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet

snippet af
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet afo
(${1}) => ({
	${0:${VISUAL}}
})
endsnippet

snippet ${
${${1}}${0}
endsnippet

snippet today "Date"
${1:`date +%Y-%m-%d`}
endsnippet

# React
snippet ir "import react"
import React from 'react';
endsnippet

snippet ue "use effect"
React.useEffect(() => {
	$1
}, []);
endsnippet

snippet us "use state"
const [${1:value}, set${1/(\w+).*/\u$0/g}] = React.useState($0);
endsnippet

snippet ur "use reducer"
const [${1:state}, ${2:setState}] = React.useReducer(
	(state, newState) => ({ ...state, ...newState }),
	${3:initialValue}
);$0
endsnippet

# Tests
snippet desc "Test Suite"
describe('$1', () => {
	${0:${VISUAL}}
});
endsnippet

snippet it "Test case"
it('$1', async () => {
	${0:${VISUAL}}
});
endsnippet

snippet be "Before Each"
beforeEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet try "Try/catch"
try {
	${1:${VISUAL}}
} catch (err) {
	${0}
}
endsnippet

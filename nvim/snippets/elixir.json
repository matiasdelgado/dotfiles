{
  "defmodule": {
    "prefix": "defmo",
    "body": ["defmodule ${1:$TM_FILENAME_BASE}Test do", "  $0", "end"],
    "description": "Define a module"
  },
  "def": {
    "prefix": "def",
    "body": ["def ${1:name}() do", "  $0", "end"],
    "description": "Define a function"
  },
  "defp": {
    "prefix": "defp",
    "body": ["defp ${1:name}($2) do", "  $0", "end"],
    "description": "Define a private function"
  },
  "anon_function": {
    "prefix": "fn",
    "body": ["fn ${1:args} -> ${0} end"],
    "description": "Define a anonymous function"
  },
  "file_save": {
    "prefix": "file_save",
    "body": [
      "{:ok, file} = File.open(\"${1:test.html}\", [:write])",
      "IO.binwrite(file,${0})",
      "File.close(file)"
    ],
    "description": "Save content to file"
  },
  "inspect_simple": {
    "prefix": "ins",
    "body": [
      "IO.inspect ${0}"
    ],
    "description": "Debug message"
  },
  "inspect_debug": {
    "prefix": "inst",
    "body": [
      "IO.inspect \"----------------------------------\"",
      "IO.inspect ${0}"
    ],
    "description": "Debug message"
  },
  "IO.inspect with label": {
    "prefix": "insl",
    "body": "IO.inspect($0, label: \"${1:label}\")"
  },
  "IO.inspect with label and pipe": {
    "prefix": "pinsl",
    "body": "|> IO.inspect(${0}label: \"${1:label}\")"
  },
  "inspect_selection": {
    "prefix": "insv",
    "body": [
      "IO.inspect(${0:${VISUAL}})"
    ],
    "description": "Inspect selection"
  },
  "pipe": {
    "prefix": "p",
    "body": ["|> $0"]
  },
  "stack_trace": {
    "prefix": "printstack",
    "body": [
      "IO.inspect(Process.info(self(), :current_stacktrace), label: \"STACKTRACE\")"
    ],
    "description": "Print stack trace"
  },
  "test": {
    "prefix": "test",
    "body": ["test \"${1:test name}\" do", "${0}", "end"]
  },
  "test_with_context": {
    "prefix": "testc",
    "body": ["test \"${1:test name}\", ctx do", "${0}", "end"]
  },
  "test_with_arguments": {
    "prefix": "testa",
    "body": ["test \"${1:test name}\", %{${2:arg}: arg} do", "${0}", "end"]
  },
  "capture_log": {
    "prefix": "taglog",
    "body": ["@tag capture_log: true"]
  },
  "test_describe": {
    "prefix": "des",
    "body": ["describe \"${1:test group subject}\" do", "\t${0}", "end"]
  },
  "test_module": {
    "prefix": "exunit",
    "body": ["defmodule ${1:$TM_FILENAME_BASE} do", "\tuse ExUnit.Case, async: true", "", "  ${0}", "end"]
  }
}
